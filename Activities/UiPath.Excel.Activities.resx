<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddHeadersDisplayName" xml:space="preserve">
    <value>AddHeaders</value>
    <comment>property name</comment>
  </data>
  <data name="AutoSaveDisplayName" xml:space="preserve">
    <value>AutoSave</value>
    <comment>property name</comment>
  </data>
  <data name="CellDisplayName" xml:space="preserve">
    <value>Cell</value>
    <comment>property name</comment>
  </data>
  <data name="CellArgumentInvalid" xml:space="preserve">
    <value>{0} argument is invalid</value>
  </data>
  <data name="CellOrRangeDescription" xml:space="preserve">
    <value>Cell or Range</value>
  </data>
  <data name="CodeFilePathDisplayName" xml:space="preserve">
    <value>CodeFilePath</value>
    <comment>property name</comment>
  </data>
  <data name="ColorDisplayName" xml:space="preserve">
    <value>Color</value>
    <comment>property name</comment>
  </data>
  <data name="ColorDescription" xml:space="preserve">
    <value>The System.Drawing.Color for the specified cell</value>
  </data>
  <data name="ColumnNameDisplayName" xml:space="preserve">
    <value>ColumnName</value>
    <comment>property name</comment>
  </data>
  <data name="Common" xml:space="preserve">
    <value>Common</value>
  </data>
  <data name="ContinueOnErrorDisplayName" xml:space="preserve">
    <value>ContinueOnError</value>
    <comment>property name</comment>
  </data>
  <data name="CreateNewFileDisplayName" xml:space="preserve">
    <value>CreateNewFile</value>
    <comment>property name</comment>
  </data>
  <data name="DataTableDisplayName" xml:space="preserve">
    <value>DataTable</value>
    <comment>property name</comment>
  </data>
  <data name="DelimiterDisplayName" xml:space="preserve">
    <value>Delimiter</value>
    <comment>property name</comment>
  </data>
  <data name="DestinationFilePathDisplayName" xml:space="preserve">
    <value>DestinationFilePath</value>
    <comment>property name</comment>
  </data>
  <data name="DestinationSheetNameDisplayName" xml:space="preserve">
    <value>DestinationSheetName</value>
    <comment>property name</comment>
  </data>
  <data name="EditPasswordDisplayName" xml:space="preserve">
    <value>EditPassword</value>
    <comment>property name</comment>
  </data>
  <data name="EncodingDisplayName" xml:space="preserve">
    <value>Encoding</value>
    <comment>property name</comment>
  </data>
  <data name="EntryMethodNameDisplayName" xml:space="preserve">
    <value>EntryMethodName</value>
    <comment>property name</comment>
  </data>
  <data name="EntryMethodParametersDisplayName" xml:space="preserve">
    <value>EntryMethodParameters</value>
    <comment>property name</comment>
  </data>
  <data name="ExistingWorkbookDisplayName" xml:space="preserve">
    <value>ExistingWorkbook</value>
    <comment>property name</comment>
  </data>
  <data name="File" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="FilePathDisplayName" xml:space="preserve">
    <value>FilePath</value>
    <comment>property name</comment>
  </data>
  <data name="FillRangeDisplayName" xml:space="preserve">
    <value>FillRange</value>
    <comment>property name</comment>
  </data>
  <data name="FillRangeDescription" xml:space="preserve">
    <value>Destination range to be filled using specified rule</value>
  </data>
  <data name="FilterOptionsDisplayName" xml:space="preserve">
    <value>FilterOptions</value>
    <comment>property name</comment>
  </data>
  <data name="FormulaDisplayName" xml:space="preserve">
    <value>Formula</value>
    <comment>property name</comment>
  </data>
  <data name="IncludeColumnNamesDisplayName" xml:space="preserve">
    <value>IncludeColumnNames</value>
    <comment>property name</comment>
  </data>
  <data name="IndexDisplayName" xml:space="preserve">
    <value>Index</value>
    <comment>property name</comment>
  </data>
  <data name="IndexDescription" xml:space="preserve">
    <value>Index of the sheet</value>
  </data>
  <data name="Input" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="InvalidRangeException" xml:space="preserve">
    <value>Invalid range specified</value>
  </data>
  <data name="IsPivotDisplayName" xml:space="preserve">
    <value>IsPivot</value>
    <comment>property name</comment>
  </data>
  <data name="MacroNameDisplayName" xml:space="preserve">
    <value>MacroName</value>
    <comment>property name</comment>
  </data>
  <data name="MacroOutputDisplayName" xml:space="preserve">
    <value>MacroOutput</value>
    <comment>property name</comment>
  </data>
  <data name="MacroParametersDisplayName" xml:space="preserve">
    <value>MacroParameters</value>
    <comment>property name</comment>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="OrderDisplayName" xml:space="preserve">
    <value>Order</value>
    <comment>property name</comment>
  </data>
  <data name="OutputDisplayName" xml:space="preserve">
    <value>Output</value>
    <comment>property name</comment>
  </data>
  <data name="OutputValueDisplayName" xml:space="preserve">
    <value>OutputValue</value>
    <comment>property name</comment>
  </data>
  <data name="PasswordDisplayName" xml:space="preserve">
    <value>Password</value>
    <comment>property name</comment>
  </data>
  <data name="PivotTableDestinationDescription" xml:space="preserve">
    <value>Range specifying where the pivot table will be created</value>
  </data>
  <data name="PivotTableNameDescription" xml:space="preserve">
    <value>Name of the pivot table</value>
  </data>
  <data name="PositionDisplayName" xml:space="preserve">
    <value>Position</value>
    <comment>property name</comment>
  </data>
  <data name="RangeDisplayName" xml:space="preserve">
    <value>Range</value>
    <comment>property name</comment>
  </data>
  <data name="ResultDisplayName" xml:space="preserve">
    <value>Result</value>
    <comment>property name</comment>
  </data>
  <data name="SourceRangeAutoFillDisplayName" xml:space="preserve">
    <value>SourceRange</value>
    <comment>property name</comment>
  </data>
  <data name="SourceRangeAutoFillDescription" xml:space="preserve">
    <value>Range specifying the rule for auto fill</value>
  </data>
  <data name="SelectedRangeDescription" xml:space="preserve">
    <value>Selected range</value>
  </data>
  <data name="SheetDisplayName" xml:space="preserve">
    <value>Sheet</value>
    <comment>property name</comment>
  </data>
  <data name="SheetDescription" xml:space="preserve">
    <value>Name of the sheet</value>
  </data>
  <data name="SheetNameDisplayName" xml:space="preserve">
    <value>SheetName</value>
    <comment>property name</comment>
  </data>
  <data name="SheetsDisplayName" xml:space="preserve">
    <value>Sheets</value>
    <comment>property name</comment>
  </data>
  <data name="ShiftCellsDisplayName" xml:space="preserve">
    <value>ShiftCells</value>
    <comment>property name</comment>
  </data>
  <data name="SourceTableNameDisplayName" xml:space="preserve">
    <value>SourceTableName</value>
    <comment>property name</comment>
  </data>
  <data name="ShiftOptionDisplayName" xml:space="preserve">
    <value>ShiftOption</value>
    <comment>property name</comment>
  </data>
  <data name="SourceTableNameDescription" xml:space="preserve">
    <value>Name of the source table for the pivot</value>
  </data>
  <data name="StartingCellDisplayName" xml:space="preserve">
    <value>StartingCell</value>
    <comment>property name</comment>
  </data>
  <data name="TableNameDisplayName" xml:space="preserve">
    <value>TableName</value>
    <comment>property name</comment>
  </data>
  <data name="TableNameDescription" xml:space="preserve">
    <value>Name of the new table</value>
  </data>
  <data name="TableNameException" xml:space="preserve">
    <value>Invalid table name</value>
  </data>
  <data name="TableRangeDescription" xml:space="preserve">
    <value>Input range for creating the table</value>
  </data>
  <data name="TargetDisplayName" xml:space="preserve">
    <value>Target</value>
    <comment>property name</comment>
  </data>
  <data name="TextDisplayName" xml:space="preserve">
    <value>Text</value>
    <comment>property name</comment>
  </data>
  <data name="UseExistingWorkbook" xml:space="preserve">
    <value>Use Existing Workbook</value>
  </data>
  <data name="UseFilterDisplayName" xml:space="preserve">
    <value>UseFilter</value>
    <comment>property name</comment>
  </data>
  <data name="ValidationMessage" xml:space="preserve">
    <value>Activity is valid only inside {0}</value>
  </data>
  <data name="ValueDisplayName" xml:space="preserve">
    <value>Value</value>
    <comment>property name</comment>
  </data>
  <data name="ValueDescription" xml:space="preserve">
    <value>The input value/formula</value>
  </data>
  <data name="VisibleDisplayName" xml:space="preserve">
    <value>Visible</value>
    <comment>property name</comment>
  </data>
  <data name="WorkbookDisplayName" xml:space="preserve">
    <value>Workbook</value>
    <comment>property name</comment>
  </data>
  <data name="WorkbookClosedAbnormally" xml:space="preserve">
    <value>Workbook was closed by a 3rd party, while the Excel Application Scope was running.</value>
  </data>
  <data name="WorkbookPathDisplayName" xml:space="preserve">
    <value>WorkbookPath</value>
    <comment>property name</comment>
  </data>
  <data name="WorkbookPathNotSet" xml:space="preserve">
    <value>{0} needs to be set.</value>
  </data>
  <data name="WorkbookPathNotSupplied" xml:space="preserve">
    <value>Value for a required activity argument {0} was not supplied.</value>
  </data>
  <data name="WorkbookSheetsDescription" xml:space="preserve">
    <value>Workbook sheets</value>
  </data>
  <data name="ChangeModeDisplayName" xml:space="preserve">
    <value>ChangeMode</value>
    <comment>property name</comment>
  </data>
  <data name="ReadOnlyDisplayName" xml:space="preserve">
    <value>ReadOnly</value>
    <comment>property name</comment>
  </data>
  <data name="ChangeModeDescription" xml:space="preserve">
    <value>Specifies if insertion/deletion is performed</value>
  </data>
  <data name="NoColumnsDisplayName" xml:space="preserve">
    <value>NoColumns</value>
    <comment>property name</comment>
  </data>
  <data name="NoColumnsDescription" xml:space="preserve">
    <value>Number of columns to insert/delete</value>
  </data>
  <data name="NoRowsDisplayName" xml:space="preserve">
    <value>NoRows</value>
    <comment>property name</comment>
  </data>
  <data name="NoRowsDescription" xml:space="preserve">
    <value>Number of rows to insert/delete</value>
  </data>
  <data name="PositionDescription" xml:space="preserve">
    <value>Position where insertion/deletion will take place</value>
  </data>
  <data name="LookupRangeDescription" xml:space="preserve">
    <value>Range to be searched</value>
  </data>
  <data name="ResultLookupDescription" xml:space="preserve">
    <value>Address of the cell containing the searched value</value>
  </data>
  <data name="ValueLookupDescription" xml:space="preserve">
    <value>Value to be searched</value>
  </data>
  <data name="RemoveDuplicatesRangeDescription" xml:space="preserve">
    <value>Delete all the rows that are duplicated in the specified range</value>
  </data>
  <data name="DestinationCellDisplayName" xml:space="preserve">
    <value>DestinationCell</value>
    <comment>property name</comment>
  </data>
  <data name="DestinationCellDescription" xml:space="preserve">
    <value>The start cell for the range to be pasted</value>
  </data>
  <data name="DestinationSheetDisplayName" xml:space="preserve">
    <value>DestinationSheet</value>
    <comment>property name</comment>
  </data>
  <data name="DestinationSheetDescription" xml:space="preserve">
    <value>The sheet to paste into</value>
  </data>
  <data name="SourceRangeDisplayName" xml:space="preserve">
    <value>SourceRange</value>
    <comment>property name</comment>
  </data>
  <data name="SourceRangeDescription" xml:space="preserve">
    <value>The range to copy</value>
  </data>
  <data name="CopyItemsDisplayName" xml:space="preserve">
    <value>CopyItems</value>
    <comment>property name</comment>
  </data>
  <data name="CopyItemsDescription" xml:space="preserve">
    <value>Values and format items to copy</value>
  </data>
  <data name="NothingToCopyError" xml:space="preserve">
    <value>There must be at least one item/cell feature to copy.</value>
  </data>
  <data name="Cell" xml:space="preserve">
    <value>Cell</value>
  </data>
  <data name="DestinationCell" xml:space="preserve">
    <value>Destination Cell</value>
  </data>
  <data name="DestinationSheet" xml:space="preserve">
    <value>Destination Sheet</value>
  </data>
  <data name="DestinationSheetName" xml:space="preserve">
    <value>Destination Sheet Name</value>
  </data>
  <data name="NoColumns" xml:space="preserve">
    <value>NoColumns</value>
  </data>
  <data name="NoRows" xml:space="preserve">
    <value>NoRows</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="Position" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="Range" xml:space="preserve">
    <value>Range</value>
  </data>
  <data name="SourceRange" xml:space="preserve">
    <value>Source Range</value>
  </data>
  <data name="StartingCell" xml:space="preserve">
    <value>Starting Cell</value>
  </data>
  <data name="Target" xml:space="preserve">
    <value>Target</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="WorkbookPath" xml:space="preserve">
    <value>Workbook Path</value>
  </data>
  <data name="Destination" xml:space="preserve">
    <value>Destination</value>
  </data>
  <data name="PreserveFormatDisplayName" xml:space="preserve">
    <value>PreserveFormat</value>
    <comment>property name</comment>
  </data>
  <data name="ReadCellCellDescription" xml:space="preserve">
    <value>Specifies the cell (in range format) to be read</value>
  </data>
  <data name="PreserveFormatDescription" xml:space="preserve">
    <value>Preserve the format as displayed in the cell (currency, date, etc)</value>
  </data>
  <data name="ReadCellResultDescription" xml:space="preserve">
    <value>The cell value</value>
  </data>
  <data name="ReadRowResultDescription" xml:space="preserve">
    <value>The row result as IEnumerable</value>
  </data>
  <data name="ReadRowStartingCellDescription" xml:space="preserve">
    <value>Specifies the starting cell (in range format) from which the row is read</value>
  </data>
  <data name="ReadColumnResultDescription" xml:space="preserve">
    <value>The column result as IEnumerable</value>
  </data>
  <data name="ReadColumnStartingCellDescription" xml:space="preserve">
    <value>Specifies the starting cell (in range format) from which the column is read</value>
  </data>
  <data name="ReadRangeAddHeadersDescription" xml:space="preserve">
    <value>Specifies if the first row in the range should be considered column headers definitions. If set to false, the column in the DataTable returned will have empty names</value>
  </data>
  <data name="ReadRangeDataTableDescription" xml:space="preserve">
    <value>Output DataTable object in which the read data is stored</value>
  </data>
  <data name="ReadRangeRangeDescription" xml:space="preserve">
    <value>Specifies the range of cells to be read. If this value is not specified, the whole spreadsheet is read. If the value consists of only one cell, the whole spreadsheet is read starting from that cell</value>
  </data>
  <data name="ReadRangeUseFilterDescription" xml:space="preserve">
    <value>Apply the workbook defined filters</value>
  </data>
  <data name="PreserveFormatSlowDescription" xml:space="preserve">
    <value>Preserve the format as displayed in the cell (currency, date, etc). This reads the range cell-by-cell and offers less performance than reading bulk.</value>
  </data>
  <data name="PreserveFormatSlowDisplayName" xml:space="preserve">
    <value>PreserveFormat</value>
    <comment>property name</comment>
  </data>
  <data name="Do" xml:space="preserve">
    <value>Do</value>
  </data>
  <data name="WorkbookNotInitiliazed" xml:space="preserve">
    <value>Workbook not initialized.</value>
  </data>
  <data name="NoCellSelected" xml:space="preserve">
    <value>No cell is selected in the current Excel worksheet</value>
  </data>
  <data name="NoRangeSelected" xml:space="preserve">
    <value>No range is selected in the current Excel worksheet</value>
  </data>
  <data name="SelectedCellNotOpen" xml:space="preserve">
    <value>Please open Excel, select the cell you want to work with and try again.</value>
  </data>
  <data name="SelectedRangeNotOpen" xml:space="preserve">
    <value>Please open Excel, select the range you want to work with and try again.</value>
  </data>
  <data name="SelectedSheetNotOpen" xml:space="preserve">
    <value>Please open Excel, indicate the sheet you want to work with and try again.</value>
  </data>
  <data name="VariableNameValidation" xml:space="preserve">
    <value>VariableName or FilePathArgumentName not set</value>
  </data>
  <data name="VariableNotFound" xml:space="preserve">
    <value>Quick Handle variable not found</value>
  </data>
  <data name="RangeAddressIsNullOrEmpty" xml:space="preserve">
    <value>Excel range address is null or empty.</value>
  </data>
  <data name="CurrentRowColumnIndexOutsideRange" xml:space="preserve">
    <value>Column index {0} is outside of the selected range {1}</value>
  </data>
  <data name="QuickHandleClosed" xml:space="preserve">
    <value>Workbook closed. Please re-initialize the workbook.</value>
  </data>
  <data name="CannotConvertExcelValue" xml:space="preserve">
    <value>Cannot convert Excel Value to {0}</value>
  </data>
  <data name="CannotDivide" xml:space="preserve">
    <value>Cannot divide a {0} with a {1}</value>
  </data>
  <data name="CompareNotImplemented" xml:space="preserve">
    <value>Compare not implemented for {0} with {1}</value>
  </data>
  <data name="TableOnDataColumnsMismatch" xml:space="preserve">
    <value>Table on data columns mismatch</value>
  </data>
  <data name="CannotAdd" xml:space="preserve">
    <value>Cannot add {0} to {1}</value>
  </data>
  <data name="CannotSubtract" xml:space="preserve">
    <value>Cannot subtract a {0} from a {1}</value>
  </data>
  <data name="CannotMultiply" xml:space="preserve">
    <value>Cannot multiply a {0} with a {1}</value>
  </data>
</root>